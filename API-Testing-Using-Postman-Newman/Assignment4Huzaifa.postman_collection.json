{
	"info": {
		"_postman_id": "bf22713d-1be2-427a-95c5-4c54a97f5bb1",
		"name": "Assignment4Huzaifa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39255664"
	},
	"item": [
		{
			"name": "Get",
			"item": [
				{
					"name": "GetProducts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema contains required fields and data types\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('products').that.is.an('array').and.not.empty;\r",
									"    responseData.products.forEach(function(product) {\r",
									"        pm.expect(product).to.be.an('object');\r",
									"        pm.expect(product).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(product).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(product).to.have.property('price').that.is.a('number');\r",
									"        pm.expect(product).to.have.property('category').that.is.a('string');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://www.pseudojson.com/products",
							"protocol": "http",
							"host": [
								"www",
								"pseudojson",
								"com"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSingleProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema for the product details\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData.id).to.be.a('number');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData.name).to.be.a('string');\r",
									"    pm.expect(responseData).to.have.property('price');\r",
									"    pm.expect(responseData.price).to.be.a('number');\r",
									"    pm.expect(responseData).to.have.property('description');\r",
									"    pm.expect(responseData.description).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products/1000",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products",
								"1000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post",
			"item": [
				{
					"name": "PostProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys(\r",
									"        '_id', 'brand', 'category', 'description', 'discountPercentage',\r",
									"        'id', 'images', 'price', 'rating', 'stock', 'thumbnail', 'title'\r",
									"    );\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Images array is present and contains at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.images).to.exist;\r",
									"    pm.expect(responseData.images).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Price is a non-negative number\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.price).to.be.a('number');\r",
									"  pm.expect(responseData.price).to.be.at.least(0, \"Price should be a non-negative number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomId = Math.floor(Math.random() * 100005);\r",
									"pm.environment.set(\"randomId\", randomId);\r",
									"console.log(\"Random ID generated: \" + randomId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJleHAiOjE3MzEwNzY4Mzd9.op6be90sG6wpx7kzL3VsE3UwIg3RDgK5HDUxcF9Lq0Y",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"brand\": \"Apple\",\r\n\"category\": \"smartphones\",\r\n\"description\": \"An apple mobile which is nothing like apple\",\r\n\"discountPercentage\": 12.96,\r\n\"id\": {{randomId}},\r\n\"images\": [\r\n    \"https://unsplash.com/photos/a-close-up-of-a-person-holding-a-cell-phone-KX_7S9bXYjY\"\r\n],\r\n\"price\": 1449,\r\n\"rating\": 12.69,\r\n\"stock\": 188,\r\n\"thumbnail\": \"https://unsplash.com/photos/a-close-up-of-a-person-holding-a-cell-phone-KX_7S9bXYjY\",\r\n\"title\": \"iPhone 15 pro\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/products",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema for expected fields and data types\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('token').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('user').that.is.an('object');\r",
									"    pm.expect(responseData.user).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(responseData.user).to.have.property('username').that.is.a('string');\r",
									"    pm.expect(responseData.user).to.have.property('email').that.is.a('string');\r",
									"    pm.expect(responseData.user).to.have.property('createdAt').that.is.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseURL}}/login",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "DeleteProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Presence and type of 'id' field in the response schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJleHAiOjE3MzEwNzY4Mzd9.op6be90sG6wpx7kzL3VsE3UwIg3RDgK5HDUxcF9Lq0Y",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products/{{randomId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products",
								"{{randomId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Put",
			"item": [
				{
					"name": "UpdateProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJleHAiOjE3MzEwNzY4Mzd9.op6be90sG6wpx7kzL3VsE3UwIg3RDgK5HDUxcF9Lq0Y",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"brand\": \"Samsung1\",\r\n\"category\": \"smartphones\",\r\n\"description\": \"An apple mobile which is nothing like apple\",\r\n\"discountPercentage\": 12.96,\r\n\"id\": {{randomId}},\r\n\"images\": [\r\n    \"https://unsplash.com/photos/a-close-up-of-a-person-holding-a-cell-phone-KX_7S9bXYjY\"\r\n],\r\n\"price\": 1449,\r\n\"rating\": 12.69,\r\n\"stock\": 188,\r\n\"thumbnail\": \"https://unsplash.com/photos/a-close-up-of-a-person-holding-a-cell-phone-KX_7S9bXYjY\",\r\n\"title\": \"iPhone 15 pro\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/products/{{randomId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products",
								"{{randomId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}